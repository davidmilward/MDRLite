// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mdc.web;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import uk.co.mdc.model.ConceptualDomain;
import uk.co.mdc.web.ConceptualDomainController;

privileged aspect ConceptualDomainController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConceptualDomainController.showJson(@PathVariable("id") Long id) {
        ConceptualDomain conceptualDomain = ConceptualDomain.findConceptualDomain(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (conceptualDomain == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(conceptualDomain.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConceptualDomainController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<ConceptualDomain> result = ConceptualDomain.findAllConceptualDomains();
        return new ResponseEntity<String>(ConceptualDomain.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ConceptualDomainController.createFromJson(@RequestBody String json) {
        ConceptualDomain conceptualDomain = ConceptualDomain.fromJsonToConceptualDomain(json);
        conceptualDomain.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ConceptualDomainController.createFromJsonArray(@RequestBody String json) {
        for (ConceptualDomain conceptualDomain: ConceptualDomain.fromJsonArrayToConceptualDomains(json)) {
            conceptualDomain.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ConceptualDomainController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        ConceptualDomain conceptualDomain = ConceptualDomain.fromJsonToConceptualDomain(json);
        if (conceptualDomain.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ConceptualDomainController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (ConceptualDomain conceptualDomain: ConceptualDomain.fromJsonArrayToConceptualDomains(json)) {
            if (conceptualDomain.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> ConceptualDomainController.deleteFromJson(@PathVariable("id") Long id) {
        ConceptualDomain conceptualDomain = ConceptualDomain.findConceptualDomain(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (conceptualDomain == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        conceptualDomain.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
