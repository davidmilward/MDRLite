// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package uk.co.mdc.model;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import uk.co.mdc.model.Valuedomain;

privileged aspect Valuedomain_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Valuedomain.entityManager;
    
    public static final EntityManager Valuedomain.entityManager() {
        EntityManager em = new Valuedomain().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Valuedomain.countValuedomains() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Valuedomain o", Long.class).getSingleResult();
    }
    
    public static List<Valuedomain> Valuedomain.findAllValuedomains() {
        return entityManager().createQuery("SELECT o FROM Valuedomain o", Valuedomain.class).getResultList();
    }
    
    public static Valuedomain Valuedomain.findValuedomain(Long id) {
        if (id == null) return null;
        return entityManager().find(Valuedomain.class, id);
    }
    
    public static List<Valuedomain> Valuedomain.findValuedomainEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Valuedomain o", Valuedomain.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Valuedomain.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Valuedomain.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Valuedomain attached = Valuedomain.findValuedomain(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Valuedomain.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Valuedomain.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Valuedomain Valuedomain.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Valuedomain merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
